#!/bin/bash

if [ -z $GPUPUNK_PATH ]; then
    echo "GPUPUNK_PATH is not set."
    exit -1
fi

if [ -z $DRCCTPROF_PATH ]; then
    echo "DRCCTPROF_PATH is not set."
    exit -1
fi

gputrigger_lib_path=${GPUPUNK_PATH}/gputrigger/libgputrigger.so
libmonitor_path=${GPUPUNK_PATH}/libmonitor/lib/libmonitor.so
# default analysis mode is mem_page
export GPUPUNK_ANALYSIS_MODE=5
# wit libmonitor
export W_LIBMONITOR=1
# with drcctprof
export GPUPUNK_WITH_DRRUN=1
# with hpcrun
export GPUPUNK_WITH_HPCRUN=0
# with detail log
export GPUPUNK_VERBOSE=0

usage() {
    cat <<EOF
Usage:
    gvprof [profiling options] [executable] [executable arguments]
    profiling options:
    -h help
    -libm [yes|no|y|n] 
        default is yes. This option will enable libmonitor.
    -m [mem_page|value_pattern]
        default is mem_page. 
    -drrun [yes|no|y|n]
        default is yes. This option will enable drcctprof.
    -hpcrun [yes|no|y|n]
        default is no. This option will enable hpcrun.
    -v [yes|no|y|n]
        default is no. This option will enable verbose.
    -l <launcher>
        default is none. pass launcher command for execution. (e.g., "mpirun -np 1")
EOF
    exit 0
}

while test "x$1" != x; do
    arg="$1"
    shift
    case "$arg" in
    -libm)
        if [ $1 == "no" ] || [ $1 == "n" ]; then
            libmonitor_path=
            export W_LIBMONITOR=0
        else
            if [ $1 != "yes" ] && [ $1 != "y" ]; then
                echo "wrong argument pattern for libmonitor"
                exit -1
            fi
        fi
        shift
        ;;
    -m)
        case $1 in
        "mem_page")
            export GPUPUNK_ANALYSIS_MODE=5
            ;;
        "value_pattern")
            export GPUPUNK_ANALYSIS_MODE=3
            ;;
        *)
            export GPUPUNK_ANALYSIS_MODE=5
            ;;
        esac
        shift
        ;;
    -drrun)
        if [ $1 == "no" ] || [ $1 == "n" ]; then
            export GPUPUNK_WITH_DRRUN=0
        else
            if [ $1 != "yes" ] && [ $1 != "y" ]; then
                echo "wrong argument pattern for -drrun"
                exit -1
            fi
        fi
        shift
        ;;
    -hpcrun)
        if [ $1 == "no" ] || [ $1 == "n" ]; then
            export GPUPUNK_WITH_HPCRUN=0
        else
            if [ $1 != "yes" ] && [ $1 != "y" ]; then
                echo "wrong argument pattern for -drhpcrun"
                exit -1
            else
                export GPUPUNK_WITH_HPCRUN=1
            fi
        fi
        shift
        ;;
    -v)
        export GPUPUNK_VERBOSE=1
        ;;
    -l)
        export GPUPUNK_LAUNCHER="$1"
        shift
        ;;
    -h)
        usage
        exit
        ;;
    *)
        set -- "$arg" "$@"
        break
        ;;
    esac
done

GPUPUNK_EXEC=$1
GPUPUNK_ARGS="${*:2}"

if [ -z "$GPUPUNK_EXEC" ]; then
    echo "Empty executable"
    usage
    exit
fi

if [ ! -z $GPUPUNK_VERBOSE ]; then
    export GPUPUNK_REDIRECT=./gpupunk.log
else
    export GPUPUNK_REDIRECT=/dev/null
fi

if [ $GPUPUNK_WITH_HPCRUN -eq 1 ]; then
    if [ -z $HPCTOOLKIT_PATH ]; then
        echo "HPCTOOLKIT_PATH is not set."
        exit -1
    fi
    MEASUREMENTS=gpupunk-measurements
    DATABASE=gpupunk-database
    echo "Make sure $MEASUREMENTS and $DATABASE is clean"
    rm -rf $MEASUREMENTS
    rm -rf $DATABASE
    HPCRUN=${HPCTOOLKIT_PATH}/bin/hpcrun
    echo "$GPUPUNK_LAUNCHER $HPCRUN -e gpu=nvidia -o $MEASUREMENTS $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT"
    $GPUPUNK_LAUNCHER $HPCRUN -e gpu=nvidia -o $MEASUREMENTS $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT
    HPCSTRUCT=${HPCTOOLKIT_PATH}/bin/hpcstruct
    $HPCSTRUCT -j 12 $MEASUREMENTS &>> $GPUPUNK_REDIRECT
    rm ./cubins ./structs
    ln -s $MEASUREMENTS/cubins ./
    ln -s $MEASUREMENTS/structs ./
fi

if [ $GPUPUNK_WITH_DRRUN -eq 1 ]; then
    # DRRUN="${DRCCTPROF_PATH}/bin64/drrun -dumpcore_mask 0x837f  -t drcctlib_cpu_gpu_memory --"
    DRRUN="${DRCCTPROF_PATH}/bin64/drrun -t drcctlib_cpu_gpu_memory --"
else
    DRRUN=
fi

if [ $GPUPUNK_LAUNCHER ]; then
    echo "$GPUPUNK_LAUNCHER -x LD_PRELOAD=${gputrigger_lib_path}:${libmonitor_path} $DRRUN $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT"
    $GPUPUNK_LAUNCHER -x LD_PRELOAD=${gputrigger_lib_path}:${libmonitor_path} $DRRUN $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT
else
    echo "LD_PRELOAD=${gputrigger_lib_path}:${libmonitor_path} $DRRUN $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT"
    LD_PRELOAD=${gputrigger_lib_path}:${libmonitor_path} $DRRUN $GPUPUNK_EXEC $GPUPUNK_ARGS &>> $GPUPUNK_REDIRECT
fi

