#!/bin/bash

if [ -z $GPUPUNK_PATH ]; then
    echo "GPUPUNK_PATH is not set."
    exit -1
fi

gputrigger_lib_path=${GPUPUNK_PATH}/gputrigger/libgputrigger.so
libmonitor_path=${GPUPUNK_PATH}/libmonitor/lib/libmonitor.so
# default analysis mode is mem_page
export GPUPUNK_ANALYSIS_MODE=5

usage() {
    cat <<EOF
Usage:
    gvprof [profiling options] [executable] [executable options]
    profiling options:
    -h help
    -libm [yes|no|y|n] 
        default is yes. This option will enable libmonitor.
    -m [mem_page|value_pattern]
        default is mem_page. 
    -cfg gpu-cfg
      enable fine-grained gpu instruction analysis
    -s <sampling frequency>
      set block sampling frequency
    -l <launcher>
      pass launcher command for execution. (e.g., "mpirun -np 1")
    -v verbose
      redirect output to gvprof.log
EOF
    exit 0
}

while test "x$1" != x; do
    arg="$1"
    shift
    case "$arg" in
    -libm)
        if [ $1 == "no" ] || [ $1 == "n" ]; then
            libmonitor_path=
        else
            if [ $1 != "yes" ] && [ $1 != "y" ]; then
                echo "wrong argument pattern for libmonitor"
            fi
        fi
        shift
        ;;
    -m)
        case $1 in 
            "mem_page")
                export GPUPUNK_ANALYSIS_MODE=5
                ;;
            "value_pattern")
                export GPUPUNK_ANALYSIS_MODE=3
                ;;
            *)
                export GPUPUNK_ANALYSIS_MODE=5
                ;;
        esac
        shift
        ;;
    -e)
        export GVPROF_EVENT=$1
        shift
        ;;
    -l)
        export GVPROF_LAUNCHER="$1"
        shift
        ;;
    -ck)
        export GVPROF_CONTROL_KNOBS="$GVPROF_CONTROL_KNOBS -ck $1"
        shift
        ;;
    -s)
        export GVPROF_SAMPLING_FREQUENCY="@$1"
        shift
        ;;
    -h)
        usage
        exit
        ;;
    *)
        set -- "$arg" "$@"
        break
        ;;
    esac
done


GPUPUNK_EXEC=$1
GPUPUNK_ARGS="${*:2}"

if [ -z "$GPUPUNK_EXEC" ]
then
  echo "Empty executable"
  exit
fi

LD_PRELOAD=${gputrigger_lib_path}:${libmonitor_path} $GPUPUNK_EXEC $GPUPUNK_ARGS
